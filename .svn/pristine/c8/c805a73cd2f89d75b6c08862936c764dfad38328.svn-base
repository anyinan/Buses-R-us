package ca.ubc.cs.cpsc210.translink.parsers;

import ca.ubc.cs.cpsc210.translink.model.Route;
import ca.ubc.cs.cpsc210.translink.model.RouteManager;
import ca.ubc.cs.cpsc210.translink.model.RoutePattern;
import ca.ubc.cs.cpsc210.translink.parsers.exception.RouteDataMissingException;
import ca.ubc.cs.cpsc210.translink.providers.DataProvider;
import ca.ubc.cs.cpsc210.translink.providers.FileDataProvider;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

/**
 * Parse route information in JSON format.
 */
public class RouteParser {
    private String filename;

    public RouteParser(String filename) {
        this.filename = filename;
    }
    /**
     * Parse route data from the file and add all route to the route manager.
     *
     */
    public void parse() throws IOException, RouteDataMissingException, JSONException {
        DataProvider dataProvider = new FileDataProvider(filename);
        parseRoutes(dataProvider.dataSourceToString());
    }
    /**
     * Parse route information from JSON response produced by Translink.
     * Stores all routes and route patterns found in the RouteManager.
     *
     * @param  jsonResponse    string encoding JSON data to be parsed
     * @throws JSONException   when JSON data does not have expected format
     * @throws RouteDataMissingException when
     * <ul>
     *  <li> JSON data is not an array </li>
     *  <li> JSON data is missing Name, StopNo, Routes or location elements for any stop</li>
     * </ul>
     */

    public void parseRoutes(String jsonResponse)
            throws JSONException, RouteDataMissingException {

            JSONArray arrivals = new JSONArray(jsonResponse);
            for (int index = 0 ; index < arrivals.length() ; index++){
                JSONObject route = arrivals.getJSONObject(index);
                try {
                    parseRoute(route);
                }catch (JSONException e){
                    throw new RouteDataMissingException("Missing data");
                }
            }
    }

    private void parseRoute(JSONObject route) throws JSONException, RouteDataMissingException {
        String name = route.getString("Name").trim();
        String company = route.getString("OperatingCompany").trim();
        String number = route.getString("RouteNo").trim();
        try{
            JSONArray patterns = route.getJSONArray("Patterns");
            for (int index = 0 ; index < patterns.length() ; index++){
                JSONObject routePattern = patterns.getJSONObject(index);
                String destination = routePattern.getString("Destination").trim();
                String direction = routePattern.getString("Direction").trim();
                String patternNo = routePattern.getString("PatternNo").trim();
                String routeMap = routePattern.getJSONObject("RouteMap").getString("Href");
                storeRoute(number,name , patternNo ,destination,direction);
            }
        }catch(JSONException e){
            throw new RouteDataMissingException();
        }
    }

    private void storeRoute(String routeNumber, String routeName, String patternNo, String destination , String direction) throws JSONException, RouteDataMissingException {
        Route r = RouteManager.getInstance().getRouteWithNumber(routeNumber , routeName);
        r.addPattern(new RoutePattern(patternNo,destination,direction,r));
    }

}
